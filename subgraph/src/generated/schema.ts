// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Adapter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Adapter entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Adapter entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Adapter", id.toString(), this);
  }

  static load(id: string): Adapter | null {
    return store.get("Adapter", id) as Adapter | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get adapter(): string {
    let value = this.get("adapter");
    return value.toString();
  }

  set adapter(value: string) {
    this.set("adapter", Value.fromString(value));
  }

  get gateway(): string {
    let value = this.get("gateway");
    return value.toString();
  }

  set gateway(value: string) {
    this.set("gateway", Value.fromString(value));
  }
}

export class Stacker extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Stacker entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Stacker entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Stacker", id.toString(), this);
  }

  static load(id: string): Stacker | null {
    return store.get("Stacker", id) as Stacker | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get adapters(): Array<string> {
    let value = this.get("adapters");
    return value.toStringArray();
  }

  set adapters(value: Array<string>) {
    this.set("adapters", Value.fromStringArray(value));
  }

  get counter(): i32 {
    let value = this.get("counter");
    return value.toI32();
  }

  set counter(value: i32) {
    this.set("counter", Value.fromI32(value));
  }
}
